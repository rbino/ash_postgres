defmodule AshPostgres.TestRepo.Migrations.CrossTenantRelationships do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:multitenant_things, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :name, :text, null: false

      add :org_id,
          references(:multitenant_orgs,
            column: :id,
            name: "multitenant_things_org_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :user_id,
          references(:users,
            column: :id,
            name: "multitenant_things_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:multitenant_things, [:org_id, :name],
             name: "multitenant_things_unique_name_index"
           )

    create table(:multitenant_pictures, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :name, :text, null: false

      add :org_id,
          references(:multitenant_orgs,
            column: :id,
            name: "multitenant_pictures_org_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :thing_name,
          references(:multitenant_things,
            column: :name,
            with: [org_id: :org_id],
            match: :full,
            name: "multitenant_pictures_thing_name_fkey",
            type: :text,
            prefix: "public"
          )
    end

    create unique_index(:multitenant_pictures, [:org_id, :name],
             name: "multitenant_pictures_unique_name_index"
           )
  end

  def down do
    drop_if_exists unique_index(:multitenant_pictures, [:org_id, :name],
                     name: "multitenant_pictures_unique_name_index"
                   )

    drop constraint(:multitenant_pictures, "multitenant_pictures_org_id_fkey")

    drop constraint(:multitenant_pictures, "multitenant_pictures_thing_name_fkey")

    drop table(:multitenant_pictures)

    drop_if_exists unique_index(:multitenant_things, [:org_id, :name],
                     name: "multitenant_things_unique_name_index"
                   )

    drop constraint(:multitenant_things, "multitenant_things_org_id_fkey")

    drop constraint(:multitenant_things, "multitenant_things_user_id_fkey")

    drop table(:multitenant_things)
  end
end